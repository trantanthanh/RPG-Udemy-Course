@startuml
class Entity {
    -GameObject groundCheckStartPoint
    -GameObject wallCheckStartPoint
    +Transform attackCheck
    +float attackCheckRadius

    +int facingDir { get; private set; } = 1
    -bool isFacingRight = true

    +Animator animator
    +void DamageImpact()
    +void DamageEffect()
    +IEnumerator KnockBackHit()
    +void Flip()
    +void FlipController(float _xVelocity)
    +void SetVelocity(float _xVelocity, float yVelocity)
    +bool IsGroundDetected()
    +bool IsFaceWallDetected()
    +void SlowEntityBy(float _slowPercentage, float _duration)
    +void ReturnDefaultSpeed()
    +void Die()
}

class Player extends Entity {
    -LayerMask enemyMask
    +PlayerStateMachine stateMachine

    +PlayerSateMachine stateMachine
    +PlayerIdleState idleState
    +PlayerMoveState moveState
    +PlayerJumpState jumpState
    +PlayerAirState airState
    +PlayerDashState dashState
    +PlayerWallSlideState wallSlideState
    +PlayerWallJumpState wallJumpState
    +PlayerPrimaryAttackState primaryAttackState
    +PlayerCounterAttackState counterAttackState
    +PlayerCatchSwordState catchSwordState
    +PlayerAimSwordState aimSwordState
    +PlayerBlackHoleState blackHoleState
    +PlayerDeadState deadState

    +void Jump()
    +void AnimationDoneTrigger()
    +void DamageImpact()
    +Transform FindClosestEnemy(Vector3 _position, float _radius, float _minRange = -1f)
    +Transform FindRandomEnemy(Vector3 _position, float _radius)
    +Transform DoDamageEnemiesInCircle(Vector3 _position, float _radius, bool _isMagicalDamage = false)
}

class PlayerState {
    #Player player
    #PlayerStateMachine stateMachine
    #Rigidbody2D rb
    #float timerState = -1f
    #bool triggerCalled = false

    -string animName

    #float xInput
    #float yInput

    +PlayerState(Player _player, playerStateMachine _stateMachine, string _animName)
    +void Enter()
    +void Update()
    +void Exit()
    +void AnimationDoneTrigger()
}

class PlayerStateMachine {
    +PlayerState currentState { get; private set; }

    +void Initialize(PlayerState _startState)
    +void ChangeState(PlayerState _newState)
}


class PlayerGroundedState {
    +PlayerGroundedState(Player _player, playerStateMachine _stateMachine, string _animName)
    +void Enter()
    +void Update()
    +void Exit()
    -bool HasNoSword()
}

'Player states
class PlayerIdleState extends PlayerGroundedState {}
class PlayerMoveState extends PlayerGroundedState {}
class PlayerAimSwordState extends PlayerState {}
class PlayerAirState extends PlayerState {}
class PlayerBlackHoleState extends PlayerState {}
class PlayerCatchSwordState extends PlayerState {}
class PlayerCounterAttackState extends PlayerState {}
class PlayerDashState extends PlayerState {}
class PlayerDeadState extends PlayerState {}
class PlayerJumpState extends PlayerState {}
class PlayerPrimaryAttackState extends PlayerState {}
class PlayerWallJumpState extends PlayerState {}
class PlayerWallSlideState extends PlayerState {}

class Enemy extends Entity {
    +float stunDuration
    +Vector2 stunDirection
    -GameObject counterImage
    -bool canBeStunned = false

    +float idleTime
    -LayerMask playerMask
    -GameObject playerCheckStartPoint
    -float distancePlayerCheck
    -float distanceAttack

    +void OpenCounterAttack()
    +void CloseCounterAttack()
    +bool CanBeStunned()
    +bool CanAttack()
    +RaycastHit2D IsPlayerDetected()
    +void DoDamagePlayerInCircle(Vector3 _position, float _radius)
}

note top of PlayerStateMachine:use to manager player states:Enter, Update, Exit \nand Switch between Player's states

' Relations ship
PlayerState --> PlayerStateMachine : stateMachine
PlayerStateMachine --* Player:stateMachine
PlayerGroundedState --|> PlayerState

PlayerState --* Player
Player --> SkillManager
SkillManager --> Skill
@enduml